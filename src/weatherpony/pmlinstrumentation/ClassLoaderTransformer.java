package weatherpony.pmlinstrumentation;

import java.io.File;
import java.io.IOException;
import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.security.ProtectionDomain;
import java.util.ArrayList;
import java.util.List;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;
import org.objectweb.asm.commons.AdviceAdapter;
import org.objectweb.asm.commons.LocalVariablesSorter;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodNode;
import org.objectweb.asm.util.CheckClassAdapter;

import weatherpony.pml.launch.PMLLoadFocuser;

public class ClassLoaderTransformer implements ClassFileTransformer, Opcodes{
	
	private static final String defineClassDesc = "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;";
	private static final String findClassDesc = "(Ljava/lang/String;)Ljava/lang/Class;";
	private static final String loadClassDesc = "(Ljava/lang/String;Z)Ljava/lang/Class;";
	
	
	private static final boolean saveClassLoadersForDebug = true;
	private static boolean testingcode = false;
	
	private static boolean inEditLogging = false;
	
	@Override
	public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
		Class decider = classBeingRedefined;
		if(classBeingRedefined == null){
			ClassReader cr = new ClassReader(classfileBuffer);
			ClassNode tree = new ClassNode();
			cr.accept(tree, ClassReader.SKIP_DEBUG + ClassReader.SKIP_CODE);
			try{
				decider = loader.loadClass(tree.superName.replace('/', '.'));
			}catch(ClassNotFoundException e){
				System.err.println("PML-ClassLoaderTransformer: unable to figure out super information for "+className+". This is a serious error, and cannot be recovered from.");
				System.exit(3000);
			}
		}
		boolean altered = false;
		if(classBeingRedefined != null && className != null){
			try{
				if(className.equals("java/lang/ClassLoader")){
					ClassReader cr = new ClassReader(classfileBuffer);
					ClassNode tree = new ClassNode();
					cr.accept(tree, ClassReader.EXPAND_FRAMES);
					boolean found = false;
					for(MethodNode method : tree.methods){//I is lazy right now
						if(!method.name.equals("defineClass"))
							continue;
						if(!method.desc.equals(defineClassDesc))
							continue;
						//String name, byte[] b, int off, int len,ProtectionDomain protectionDomain
						found = true;
						
						MethodNode replacement = new MethodNode(ASM4, method.access,method.name,method.desc,method.signature,method.exceptions.toArray(new String[method.exceptions.size()]));
						ClassLoaderDefineClassMethodVisitor changer = new ClassLoaderDefineClassMethodVisitor(replacement, tree.name);
						LocalVariablesSorter sorter = new LocalVariablesSorter(method.access, method.desc, changer);
						changer.sorter = sorter;
						method.accept(sorter);
						tree.methods.remove(method);
						tree.methods.add(replacement);
						break;
					}
					if(!found){
						RuntimeException throwing = new RuntimeException();
						throwing.printStackTrace();
						System.exit(10000);
					}
					ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES + ClassWriter.COMPUTE_MAXS);
					tree.accept(new CheckClassAdapter(cw));
					classfileBuffer = cw.toByteArray();
					altered = true;
					System.err.println("PML-ClassLoaderTransformer: successfully altered ClassLoader's defineClass");
				}
			}catch(Throwable e){
				e.printStackTrace();
				System.exit(2000);
			}
		}
		if(ClassLoader.class.isAssignableFrom(decider)){
			ClassReader cr = new ClassReader(classfileBuffer);
			ClassNode tree = new ClassNode();
			cr.accept(tree, ClassReader.EXPAND_FRAMES);
			boolean methodfound = false;
			for(MethodNode method : tree.methods){//I is lazy right now
				if(!method.name.equals("loadClass"))
					continue;
				if(!method.desc.equals(loadClassDesc))
					continue;
				try{
				MethodNode replacement = new MethodNode(method.access, method.name, method.desc, method.signature, method.exceptions.toArray(new String[method.exceptions.size()]));
				ClassLoaderLoadClassMethodVisitor changer = new ClassLoaderLoadClassMethodVisitor(replacement, tree.name);
				LocalVariablesSorter sorter = new LocalVariablesSorter(method.access, method.desc, changer);
				changer.sorter = sorter;
				method.accept(sorter);
				tree.methods.remove(method);
				tree.methods.add(replacement);
				methodfound = true;
				}catch(Throwable e){
					e.printStackTrace();
				}
				break;
			}
			for(MethodNode method : tree.methods){
				if(!method.name.equals("findClass"))
					continue;
				if(!method.desc.equals(findClassDesc))
					continue;
				try{
				MethodNode replacement = new MethodNode(method.access, method.name, method.desc, method.signature, method.exceptions.toArray(new String[method.exceptions.size()]));
				ClassLoaderFindClassMethodVisitor changer = new ClassLoaderFindClassMethodVisitor(replacement, tree.name);
				LocalVariablesSorter sorter = new LocalVariablesSorter(method.access, method.desc, changer);
				changer.sorter = sorter;
				method.accept(sorter);
				tree.methods.remove(method);
				tree.methods.add(replacement);
				methodfound = true;
				}catch(Throwable e){
					e.printStackTrace();
				}
				break;
			}
			List<MethodNode> add = new ArrayList();
			List<MethodNode> minus = new ArrayList();
			for(MethodNode method : tree.methods){
				try{
				if(!method.name.equals("<init>"))//initializer - constructor
					continue;
				MethodNode replacement = new MethodNode(method.access, method.name, method.desc, method.signature, method.exceptions.toArray(new String[method.exceptions.size()]));
				ClassLoaderConstructionMethodVisitor changer = new ClassLoaderConstructionMethodVisitor(replacement, method.access, method.name, method.desc, className.replace('/','.'));
				method.accept(changer);
				minus.add(method);
				add.add(replacement);
				methodfound = true;
				}catch(Throwable e){
					e.printStackTrace();	
				}
			}
			tree.methods.removeAll(minus);
			tree.methods.addAll(add);
			{
				try{
				ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES + ClassWriter.COMPUTE_MAXS);
				//ClassVisitor checker = new CheckClassAdapter(cw);
				tree.accept(cw);
				classfileBuffer = cw.toByteArray();
				altered = true;
				
				}catch(Throwable e){
					e.printStackTrace();
				}
			}
		}
		if(altered){
			if(saveClassLoadersForDebug){
				try {
					File save = new File("PML/savedAlteredClasses", className+".class");
					if(save.exists())
						save.delete();
					save.getParentFile().mkdirs();
					save.createNewFile();
					Files.write(save.toPath(), classfileBuffer);
					System.out.println("saving generated replacement class bytes for "+className + "loaded from "+((loader==null)?"null":loader));
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			return classfileBuffer;
		}
		throw new RuntimeException();
	}
	static class ClassLoaderFindClassMethodVisitor extends MethodVisitor implements Opcodes {
		public ClassLoaderFindClassMethodVisitor(MethodVisitor mv, String className){
			super(ASM4, mv);
			this.className = className;
		}
		String className;
		LocalVariablesSorter sorter;
		@Override
		public void visitCode(){
			mv.visitCode();
			
			int p2 = sorter.newLocal(Type.getType(Object.class));
			int p3 = sorter.newLocal(Type.getType(Object.class));
			int p4 = sorter.newLocal(Type.getType(Object.class));
			int p5 = sorter.newLocal(Type.getType(Object.class));
			int p6 = sorter.newLocal(Type.getType(Object.class));
			int p7 = sorter.newLocal(Type.getType(Object.class));
			int p8 = sorter.newLocal(Type.getType(Object.class));

			Label l0 = new Label();
			Label l1 = new Label();
			Label l2 = new Label();
			mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Throwable");
			Label l3 = new Label();
			Label l4 = new Label();
			Label l5 = new Label();
			mv.visitTryCatchBlock(l3, l4, l5, "java/lang/Throwable");
			Label l6 = new Label();
			Label l7 = new Label();
			Label l8 = new Label();
			mv.visitTryCatchBlock(l6, l7, l8, "java/lang/Throwable");
			Label l9 = new Label();
			Label l10 = new Label();
			Label l11 = new Label();
			mv.visitTryCatchBlock(l9, l10, l11, "java/lang/Throwable");
			Label l12 = new Label();
			Label l13 = new Label();
			Label l14 = new Label();
			mv.visitTryCatchBlock(l12, l13, l14, "java/lang/reflect/InvocationTargetException");
			Label l15 = new Label();
			mv.visitTryCatchBlock(l12, l13, l15, "java/lang/Exception");
			Label l16 = new Label();
			Label l17 = new Label();
			Label l18 = new Label();
			mv.visitTryCatchBlock(l16, l17, l18, "java/lang/ClassNotFoundException");
			Label l19 = new Label();
			mv.visitTryCatchBlock(l16, l17, l19, "java/lang/reflect/InvocationTargetException");
			Label l20 = new Label();
			mv.visitTryCatchBlock(l16, l17, l20, "java/lang/RuntimeException");
			Label l21 = new Label();
			mv.visitTryCatchBlock(l16, l17, l21, "java/lang/Exception");
			Label l22 = new Label();
			mv.visitLabel(l22);
			mv.visitLineNumber(102, l22);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKEVIRTUAL, this.className, "findLoadedClass", "(Ljava/lang/String;)Ljava/lang/Class;");
			mv.visitVarInsn(ASTORE, p2);
			Label l23 = new Label();
			mv.visitLabel(l23);
			mv.visitLineNumber(103, l23);
			mv.visitVarInsn(ALOAD, p2);
			Label l24 = new Label();
			mv.visitJumpInsn(IFNULL, l24);
			Label l25 = new Label();
			mv.visitLabel(l25);
			mv.visitLineNumber(104, l25);
			mv.visitVarInsn(ALOAD, p2);
			mv.visitInsn(ARETURN);
			mv.visitLabel(l24);
			mv.visitLineNumber(106, l24);
			mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Class"}, 0, null);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitLdcInsn("sun.reflect.");
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;)Z");
			Label l26 = new Label();
			mv.visitJumpInsn(IFNE, l26);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitLdcInsn("java.");
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;)Z");
			mv.visitJumpInsn(IFNE, l26);
			Label l27 = new Label();
			mv.visitLabel(l27);
			mv.visitLineNumber(107, l27);
			mv.visitInsn(ACONST_NULL);
			mv.visitVarInsn(ASTORE, p3);
			Label l28 = new Label();
			mv.visitLabel(l28);
			mv.visitLineNumber(110, l28);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;");
			mv.visitVarInsn(ASTORE,p4);
			Label l29 = new Label();
			mv.visitLabel(l29);
			mv.visitLineNumber(111, l29);
			Label l30 = new Label();
			mv.visitJumpInsn(GOTO, l30);
			Label l31 = new Label();
			mv.visitLabel(l31);
			mv.visitLineNumber(112, l31);
			mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/lang/ClassLoader", "java/lang/Class"}, 0, null);
			mv.visitInsn(ACONST_NULL);
			mv.visitVarInsn(ASTORE, p5);
			mv.visitLabel(l0);
			mv.visitLineNumber(114, l0);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitLdcInsn("parent");
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;");
			mv.visitVarInsn(ASTORE, p5);
			mv.visitLabel(l1);
			mv.visitLineNumber(115, l1);
			Label l32 = new Label();
			mv.visitJumpInsn(GOTO, l32);
			mv.visitLabel(l2);
			mv.visitFrame(Opcodes.F_FULL, 6, new Object[] {this.className, "java/lang/String", "java/lang/Class", "java/lang/ClassLoader", "java/lang/Class", "java/lang/reflect/Field"}, 1, new Object[] {"java/lang/Throwable"});
			mv.visitVarInsn(ASTORE, p6);
			mv.visitLabel(l32);
			mv.visitLineNumber(117, l32);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p5);
			Label l33 = new Label();
			mv.visitJumpInsn(IFNULL, l33);
			Label l34 = new Label();
			mv.visitLabel(l34);
			mv.visitLineNumber(118, l34);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitInsn(ICONST_1);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "setAccessible", "(Z)V");
			mv.visitLabel(l3);
			mv.visitLineNumber(120, l3);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
			mv.visitTypeInsn(CHECKCAST, "java/lang/ClassLoader");
			mv.visitVarInsn(ASTORE, p3);
			mv.visitLabel(l4);
			mv.visitLineNumber(121, l4);
			mv.visitJumpInsn(GOTO, l33);
			mv.visitLabel(l5);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
			mv.visitVarInsn(ASTORE, p6);
			Label l35 = new Label();
			mv.visitLabel(l35);
			mv.visitLineNumber(122, l35);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "()V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l33);
			mv.visitLineNumber(125, l33);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getSuperclass", "()Ljava/lang/Class;");
			mv.visitVarInsn(ASTORE, p4);
			mv.visitLabel(l30);
			mv.visitLineNumber(111, l30);
			mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z");
			Label l36 = new Label();
			mv.visitJumpInsn(IFNE, l36);
			mv.visitVarInsn(ALOAD, p3);
			mv.visitJumpInsn(IFNULL, l31);
			mv.visitLabel(l36);
			mv.visitLineNumber(129, l36);
			mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
			mv.visitVarInsn(ALOAD, p3);
			Label l37 = new Label();
			mv.visitJumpInsn(IFNONNULL, l37);
			Label l38 = new Label();
			mv.visitLabel(l38);
			mv.visitLineNumber(130, l38);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getSystemClassLoader", "()Ljava/lang/ClassLoader;");
			mv.visitVarInsn(ASTORE, p3);
			mv.visitLabel(l37);
			mv.visitLineNumber(132, l37);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p3);
			mv.visitVarInsn(ASTORE, p4);
			Label l39 = new Label();
			mv.visitLabel(l39);
			mv.visitLineNumber(133, l39);
			Label l40 = new Label();
			mv.visitJumpInsn(GOTO, l40);
			Label l41 = new Label();
			mv.visitLabel(l41);
			mv.visitLineNumber(134, l41);
			mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/ClassLoader"}, 0, null);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z");
			Label l42 = new Label();
			mv.visitJumpInsn(IFEQ, l42);
			Label l43 = new Label();
			mv.visitLabel(l43);
			mv.visitLineNumber(135, l43);
			mv.visitInsn(ACONST_NULL);
			mv.visitVarInsn(ASTORE, p3);
			Label l44 = new Label();
			mv.visitLabel(l44);
			mv.visitLineNumber(136, l44);
			Label l45 = new Label();
			mv.visitJumpInsn(GOTO, l45);
			mv.visitLabel(l42);
			mv.visitLineNumber(138, l42);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;");
			mv.visitVarInsn(ASTORE, p5);
			Label l46 = new Label();
			mv.visitLabel(l46);
			mv.visitLineNumber(139, l46);
			mv.visitInsn(ACONST_NULL);
			mv.visitVarInsn(ASTORE, p6);
			Label l47 = new Label();
			mv.visitLabel(l47);
			mv.visitLineNumber(140, l47);
			Label l48 = new Label();
			mv.visitJumpInsn(GOTO, l48);
			Label l49 = new Label();
			mv.visitLabel(l49);
			mv.visitLineNumber(141, l49);
			mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/lang/Class", "java/lang/ClassLoader"}, 0, null);
			mv.visitInsn(ACONST_NULL);
			mv.visitVarInsn(ASTORE, p7);
			mv.visitLabel(l6);
			mv.visitLineNumber(143, l6);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitLdcInsn("parent");
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;");
			mv.visitVarInsn(ASTORE, p7);
			mv.visitLabel(l7);
			mv.visitLineNumber(144, l7);
			Label l50 = new Label();
			mv.visitJumpInsn(GOTO, l50);
			mv.visitLabel(l8);
			mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {this.className, "java/lang/String", "java/lang/Class", "java/lang/ClassLoader", "java/lang/ClassLoader", "java/lang/Class", "java/lang/ClassLoader", "java/lang/reflect/Field"}, 1, new Object[] {"java/lang/Throwable"});
			mv.visitVarInsn(ASTORE, p8);
			mv.visitLabel(l50);
			mv.visitLineNumber(146, l50);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p7);
			Label l51 = new Label();
			mv.visitJumpInsn(IFNULL, l51);
			Label l52 = new Label();
			mv.visitLabel(l52);
			mv.visitLineNumber(147, l52);
			mv.visitVarInsn(ALOAD, p7);
			mv.visitInsn(ICONST_1);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "setAccessible", "(Z)V");
			mv.visitLabel(l9);
			mv.visitLineNumber(149, l9);
			mv.visitVarInsn(ALOAD, p7);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
			mv.visitTypeInsn(CHECKCAST, "java/lang/ClassLoader");
			mv.visitVarInsn(ASTORE, p6);
			mv.visitLabel(l10);
			mv.visitLineNumber(150, l10);
			Label l53 = new Label();
			mv.visitJumpInsn(GOTO, l53);
			mv.visitLabel(l11);
			mv.visitLineNumber(151, l11);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
			mv.visitVarInsn(ASTORE, p8);
			Label l54 = new Label();
			mv.visitLabel(l54);
			mv.visitLineNumber(152, l54);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "()V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l51);
			mv.visitLineNumber(155, l51);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getSuperclass", "()Ljava/lang/Class;");
			mv.visitVarInsn(ASTORE, p5);
			mv.visitLabel(l48);
			mv.visitLineNumber(140, l48);
			mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z");
			mv.visitJumpInsn(IFNE, l53);
			mv.visitVarInsn(ALOAD, p6);
			mv.visitJumpInsn(IFNULL, l49);
			mv.visitLabel(l53);
			mv.visitLineNumber(157, l53);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p6);
			mv.visitVarInsn(ASTORE, p4);
			mv.visitLabel(l40);
			mv.visitLineNumber(133, l40);
			mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitJumpInsn(IFNONNULL, l41);
			mv.visitLabel(l45);
			Label next = l45;
			if(inEditLogging){
				mv.visitLineNumber(163, l45);
				mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
				mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
				mv.visitLdcInsn("PML-ClassLoader(generic) edit (findClass) :");
				mv.visitInsn(ICONST_0);
				mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
				mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;");
				mv.visitInsn(POP);
				Label l55 = new Label();
				mv.visitLabel(l55);
				mv.visitLineNumber(164, l55);
				mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
				mv.visitVarInsn(ALOAD, 1);
				mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");
				Label l56 = new Label();
				mv.visitLabel(l56);
				next = l56;
			}
			mv.visitLineNumber(166, next);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitLdcInsn(PMLLoadFocuser.LoadFocuserClassName);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z");
			mv.visitJumpInsn(IFEQ, l16);
			Label l57 = new Label();
			mv.visitLabel(l57);
			mv.visitLineNumber(167, l57);
			mv.visitVarInsn(ALOAD, p3);
			Label l58 = new Label();
			mv.visitJumpInsn(IFNULL, l58);
			mv.visitLabel(l12);
			mv.visitLineNumber(169, l12);
			mv.visitLdcInsn(Type.getType("Ljava/lang/ClassLoader;"));
			mv.visitLdcInsn("findClass");
			mv.visitInsn(ICONST_1);
			mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_0);
			mv.visitLdcInsn(Type.getType("Ljava/lang/String;"));
			mv.visitInsn(AASTORE);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;");
			mv.visitVarInsn(ASTORE, p4);
			Label l59 = new Label();
			mv.visitLabel(l59);
			mv.visitLineNumber(170, l59);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitInsn(ICONST_1);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "setAccessible", "(Z)V");
			Label l60 = new Label();
			mv.visitLabel(l60);
			mv.visitLineNumber(171, l60);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitVarInsn(ALOAD, p3);
			mv.visitInsn(ICONST_1);
			mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitInsn(AASTORE);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
			mv.visitTypeInsn(CHECKCAST, "java/lang/Class");
			mv.visitLabel(l13);
			mv.visitInsn(ARETURN);
			mv.visitLabel(l14);
			mv.visitLineNumber(172, l14);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/reflect/InvocationTargetException"});
			mv.visitVarInsn(ASTORE, p4);
			Label l61 = new Label();
			mv.visitLabel(l61);
			mv.visitLineNumber(180, l61);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l15);
			mv.visitLineNumber(181, l15);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
			mv.visitVarInsn(ASTORE, p4);
			Label l62 = new Label();
			mv.visitLabel(l62);
			mv.visitLineNumber(182, l62);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l58);
			mv.visitLineNumber(185, l58);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitTypeInsn(NEW, "java/lang/ClassNotFoundException");
			mv.visitInsn(DUP);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassNotFoundException", "<init>", "(Ljava/lang/String;)V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l16);
			mv.visitLineNumber(188, l16);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitLdcInsn(PMLLoadFocuser.LoadFocuserClassName);
			mv.visitMethodInsn(INVOKEVIRTUAL, this.className, "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");
			mv.visitVarInsn(ASTORE, p4);
			Label l63 = new Label();
			mv.visitLabel(l63);
			mv.visitLineNumber(189, l63);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitLdcInsn(PMLLoadFocuser.pmlClassSearchOverrideMethodName);
			mv.visitInsn(ICONST_2);
			mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_0);
			mv.visitLdcInsn(Type.getType("Ljava/lang/ClassLoader;"));
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_1);
			mv.visitLdcInsn(Type.getType("Ljava/lang/String;"));
			mv.visitInsn(AASTORE);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;");
			mv.visitVarInsn(ASTORE, p5);
			Label l64 = new Label();
			mv.visitLabel(l64);
			mv.visitLineNumber(190, l64);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitInsn(ACONST_NULL);
			mv.visitInsn(ICONST_2);
			mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_1);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitInsn(AASTORE);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
			mv.visitTypeInsn(CHECKCAST, "java/lang/Class");
			mv.visitVarInsn(ASTORE, p2);
			Label l65 = new Label();
			mv.visitLabel(l65);
			mv.visitLineNumber(191, l65);
			mv.visitVarInsn(ALOAD, p2);
			mv.visitJumpInsn(IFNULL, l26);
			Label l66 = new Label();
			mv.visitLabel(l66);
			mv.visitLineNumber(192, l66);
			mv.visitVarInsn(ALOAD, p2);
			mv.visitLabel(l17);
			mv.visitInsn(ARETURN);
			mv.visitLabel(l18);
			mv.visitLineNumber(193, l18);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/ClassNotFoundException"});
			mv.visitVarInsn(ASTORE, p4);
			mv.visitJumpInsn(GOTO, l26);
			mv.visitLabel(l19);
			mv.visitLineNumber(194, l19);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/reflect/InvocationTargetException"});
			mv.visitVarInsn(ASTORE, p4);
			Label l67 = new Label();
			mv.visitLabel(l67);
			mv.visitLineNumber(195, l67);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/InvocationTargetException", "getCause", "()Ljava/lang/Throwable;");
			mv.visitVarInsn(ASTORE, p5);
			Label l68 = new Label();
			mv.visitLabel(l68);
			mv.visitLineNumber(196, l68);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitTypeInsn(INSTANCEOF, "java/lang/RuntimeException");
			Label l69 = new Label();
			mv.visitJumpInsn(IFEQ, l69);
			Label l70 = new Label();
			mv.visitLabel(l70);
			mv.visitLineNumber(197, l70);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitTypeInsn(CHECKCAST, "java/lang/RuntimeException");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l69);
			mv.visitLineNumber(198, l69);
			mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/lang/reflect/InvocationTargetException", "java/lang/Throwable"}, 0, null);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/Throwable;)V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l20);
			mv.visitLineNumber(199, l20);
			mv.visitFrame(Opcodes.F_FULL, 4, new Object[] {this.className, "java/lang/String", "java/lang/Class", "java/lang/ClassLoader"}, 1, new Object[] {"java/lang/RuntimeException"});
			mv.visitVarInsn(ASTORE, p4);
			Label l71 = new Label();
			mv.visitLabel(l71);
			mv.visitLineNumber(200, l71);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitInsn(ATHROW);
			mv.visitLabel(l21);
			mv.visitLineNumber(201, l21);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
			mv.visitVarInsn(ASTORE, p4);
			Label l72 = new Label();
			mv.visitLabel(l72);
			mv.visitLineNumber(202, l72);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/Throwable;)V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l26);
			mv.visitLineNumber(207, l26);
		}
	};
	static class ClassLoaderLoadClassMethodVisitor extends MethodVisitor implements Opcodes {
		public ClassLoaderLoadClassMethodVisitor(MethodVisitor mv, String className){
			super(ASM4, mv);
			this.className = className;
		}
		String className;
		LocalVariablesSorter sorter;
		@Override
		public void visitCode(){
			
			mv.visitCode();

			int p3 = sorter.newLocal(Type.getType(Object.class));
			int p4 = sorter.newLocal(Type.getType(Object.class));
			int p5 = sorter.newLocal(Type.getType(Object.class));
			int p6 = sorter.newLocal(Type.getType(Object.class));
			int p7 = sorter.newLocal(Type.getType(Object.class));
			int p8 = sorter.newLocal(Type.getType(Object.class));
			int p9 = sorter.newLocal(Type.getType(Object.class));

			Label l0 = new Label();
			Label l1 = new Label();
			Label l2 = new Label();
			mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Throwable");
			Label l3 = new Label();
			Label l4 = new Label();
			Label l5 = new Label();
			mv.visitTryCatchBlock(l3, l4, l5, "java/lang/Throwable");
			Label l6 = new Label();
			Label l7 = new Label();
			Label l8 = new Label();
			mv.visitTryCatchBlock(l6, l7, l8, "java/lang/Throwable");
			Label l9 = new Label();
			Label l10 = new Label();
			Label l11 = new Label();
			mv.visitTryCatchBlock(l9, l10, l11, "java/lang/Throwable");
			Label l12 = new Label();
			Label l13 = new Label();
			Label l14 = new Label();
			mv.visitTryCatchBlock(l12, l13, l14, "java/lang/ClassNotFoundException");
			Label l15 = new Label();
			mv.visitTryCatchBlock(l12, l13, l15, "java/lang/reflect/InvocationTargetException");
			Label l16 = new Label();
			mv.visitTryCatchBlock(l12, l13, l16, "java/lang/RuntimeException");
			Label l17 = new Label();
			mv.visitTryCatchBlock(l12, l13, l17, "java/lang/Exception");
			Label l18 = new Label();
			mv.visitLabel(l18);
			mv.visitLineNumber(213, l18);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKEVIRTUAL, this.className, "findLoadedClass", "(Ljava/lang/String;)Ljava/lang/Class;");
			mv.visitVarInsn(ASTORE, p3);
			Label l19 = new Label();
			mv.visitLabel(l19);
			mv.visitLineNumber(214, l19);
			mv.visitVarInsn(ALOAD, p3);
			Label l20 = new Label();
			mv.visitJumpInsn(IFNULL, l20);
			Label l21 = new Label();
			mv.visitLabel(l21);
			mv.visitLineNumber(215, l21);
			mv.visitVarInsn(ALOAD, p3);
			mv.visitInsn(ARETURN);
			mv.visitLabel(l20);
			mv.visitLineNumber(217, l20);
			mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Class"}, 0, null);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitLdcInsn("sun.reflect.");
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;)Z");
			Label l22 = new Label();
			mv.visitJumpInsn(IFNE, l22);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitLdcInsn("java.");
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;)Z");
			mv.visitJumpInsn(IFNE, l22);
			Label l23 = new Label();
			mv.visitLabel(l23);
			mv.visitLineNumber(218, l23);
			mv.visitInsn(ACONST_NULL);
			mv.visitVarInsn(ASTORE, p4);
			Label l24 = new Label();
			mv.visitLabel(l24);
			mv.visitLineNumber(221, l24);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;");
			mv.visitVarInsn(ASTORE, p5);
			Label l25 = new Label();
			mv.visitLabel(l25);
			mv.visitLineNumber(222, l25);
			Label l26 = new Label();
			mv.visitJumpInsn(GOTO, l26);
			Label l27 = new Label();
			mv.visitLabel(l27);
			mv.visitLineNumber(223, l27);
			mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/lang/ClassLoader", "java/lang/Class"}, 0, null);
			mv.visitInsn(ACONST_NULL);
			mv.visitVarInsn(ASTORE, p6);
			mv.visitLabel(l0);
			mv.visitLineNumber(225, l0);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitLdcInsn("parent");
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;");
			mv.visitVarInsn(ASTORE, p6);
			mv.visitLabel(l1);
			mv.visitLineNumber(226, l1);
			Label l28 = new Label();
			mv.visitJumpInsn(GOTO, l28);
			mv.visitLabel(l2);
			mv.visitFrame(Opcodes.F_FULL, 7, new Object[] {this.className, "java/lang/String", Opcodes.INTEGER, "java/lang/Class", "java/lang/ClassLoader", "java/lang/Class", "java/lang/reflect/Field"}, 1, new Object[] {"java/lang/Throwable"});
			mv.visitVarInsn(ASTORE, p7);
			mv.visitLabel(l28);
			mv.visitLineNumber(228, l28);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p6);
			Label l29 = new Label();
			mv.visitJumpInsn(IFNULL, l29);
			Label l30 = new Label();
			mv.visitLabel(l30);
			mv.visitLineNumber(229, l30);
			mv.visitVarInsn(ALOAD, p6);
			mv.visitInsn(ICONST_1);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "setAccessible", "(Z)V");
			mv.visitLabel(l3);
			mv.visitLineNumber(231, l3);
			mv.visitVarInsn(ALOAD, p6);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
			mv.visitTypeInsn(CHECKCAST, "java/lang/ClassLoader");
			mv.visitVarInsn(ASTORE, p4);
			mv.visitLabel(l4);
			mv.visitLineNumber(232, l4);
			mv.visitJumpInsn(GOTO, l29);
			mv.visitLabel(l5);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
			mv.visitVarInsn(ASTORE, p7);
			Label l31 = new Label();
			mv.visitLabel(l31);
			mv.visitLineNumber(233, l31);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "()V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l29);
			mv.visitLineNumber(236, l29);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getSuperclass", "()Ljava/lang/Class;");
			mv.visitVarInsn(ASTORE, p5);
			mv.visitLabel(l26);
			mv.visitLineNumber(222, l26);
			mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z");
			Label l32 = new Label();
			mv.visitJumpInsn(IFNE, l32);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitJumpInsn(IFNULL, l27);
			mv.visitLabel(l32);
			mv.visitLineNumber(240, l32);
			mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
			mv.visitVarInsn(ALOAD, p4);
			Label l33 = new Label();
			mv.visitJumpInsn(IFNONNULL, l33);
			Label l34 = new Label();
			mv.visitLabel(l34);
			mv.visitLineNumber(241, l34);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getSystemClassLoader", "()Ljava/lang/ClassLoader;");
			mv.visitVarInsn(ASTORE, p4);
			mv.visitLabel(l33);
			mv.visitLineNumber(243, l33);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitVarInsn(ASTORE, p5);
			Label l35 = new Label();
			mv.visitLabel(l35);
			mv.visitLineNumber(244, l35);
			Label l36 = new Label();
			mv.visitJumpInsn(GOTO, l36);
			Label l37 = new Label();
			mv.visitLabel(l37);
			mv.visitLineNumber(245, l37);
			mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/ClassLoader"}, 0, null);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z");
			Label l38 = new Label();
			mv.visitJumpInsn(IFEQ, l38);
			Label l39 = new Label();
			mv.visitLabel(l39);
			mv.visitLineNumber(246, l39);
			mv.visitInsn(ACONST_NULL);
			mv.visitVarInsn(ASTORE, p4);
			Label l40 = new Label();
			mv.visitLabel(l40);
			mv.visitLineNumber(247, l40);
			Label l41 = new Label();
			mv.visitJumpInsn(GOTO, l41);
			mv.visitLabel(l38);
			mv.visitLineNumber(249, l38);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;");
			mv.visitVarInsn(ASTORE, p6);
			Label l42 = new Label();
			mv.visitLabel(l42);
			mv.visitLineNumber(250, l42);
			mv.visitInsn(ACONST_NULL);
			mv.visitVarInsn(ASTORE, p7);
			Label l43 = new Label();
			mv.visitLabel(l43);
			mv.visitLineNumber(251, l43);
			Label l44 = new Label();
			mv.visitJumpInsn(GOTO, l44);
			Label l45 = new Label();
			mv.visitLabel(l45);
			mv.visitLineNumber(252, l45);
			mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/lang/Class", "java/lang/ClassLoader"}, 0, null);
			mv.visitInsn(ACONST_NULL);
			mv.visitVarInsn(ASTORE, p8);
			mv.visitLabel(l6);
			mv.visitLineNumber(254, l6);
			mv.visitVarInsn(ALOAD, p6);
			mv.visitLdcInsn("parent");
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;");
			mv.visitVarInsn(ASTORE, p8);
			mv.visitLabel(l7);
			mv.visitLineNumber(255, l7);
			Label l46 = new Label();
			mv.visitJumpInsn(GOTO, l46);
			mv.visitLabel(l8);
			mv.visitFrame(Opcodes.F_FULL, 9, new Object[] {this.className, "java/lang/String", Opcodes.INTEGER, "java/lang/Class", "java/lang/ClassLoader", "java/lang/ClassLoader", "java/lang/Class", "java/lang/ClassLoader", "java/lang/reflect/Field"}, 1, new Object[] {"java/lang/Throwable"});
			mv.visitVarInsn(ASTORE, p9);
			mv.visitLabel(l46);
			mv.visitLineNumber(257, l46);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p8);
			Label l47 = new Label();
			mv.visitJumpInsn(IFNULL, l47);
			Label l48 = new Label();
			mv.visitLabel(l48);
			mv.visitLineNumber(258, l48);
			mv.visitVarInsn(ALOAD, p8);
			mv.visitInsn(ICONST_1);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "setAccessible", "(Z)V");
			mv.visitLabel(l9);
			mv.visitLineNumber(260, l9);
			mv.visitVarInsn(ALOAD, p8);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
			mv.visitTypeInsn(CHECKCAST, "java/lang/ClassLoader");
			mv.visitVarInsn(ASTORE, p7);
			mv.visitLabel(l10);
			mv.visitLineNumber(261, l10);
			Label l49 = new Label();
			mv.visitJumpInsn(GOTO, l49);
			mv.visitLabel(l11);
			mv.visitLineNumber(262, l11);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
			mv.visitVarInsn(ASTORE, p9);
			Label l50 = new Label();
			mv.visitLabel(l50);
			mv.visitLineNumber(263, l50);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "()V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l47);
			mv.visitLineNumber(266, l47);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p6);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getSuperclass", "()Ljava/lang/Class;");
			mv.visitVarInsn(ASTORE, p6);
			mv.visitLabel(l44);
			mv.visitLineNumber(251, l44);
			mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
			mv.visitVarInsn(ALOAD, p6);
			mv.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z");
			mv.visitJumpInsn(IFNE, l49);
			mv.visitVarInsn(ALOAD, p7);
			mv.visitJumpInsn(IFNULL, l45);
			mv.visitLabel(l49);
			mv.visitLineNumber(268, l49);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, p7);
			mv.visitVarInsn(ASTORE, p5);
			mv.visitLabel(l36);
			mv.visitLineNumber(244, l36);
			mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitJumpInsn(IFNONNULL, l37);
			mv.visitLabel(l41);
			Label next = l41;
			if(inEditLogging){
				mv.visitLineNumber(274, l41);
				mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
				mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
				mv.visitLdcInsn("PML-ClassLoader(generic) edit (loadClass) :");
				mv.visitInsn(ICONST_0);
				mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
				mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;");
				mv.visitInsn(POP);
				Label l51 = new Label();
				mv.visitLabel(l51);
				mv.visitLineNumber(275, l51);
				mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
				mv.visitVarInsn(ALOAD, 1);
				mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");
				Label l52 = new Label();
				mv.visitLabel(l52);
				next = l52;
			}
			mv.visitLineNumber(277, next);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitLdcInsn(PMLLoadFocuser.LoadFocuserClassName);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z");
			mv.visitJumpInsn(IFEQ, l12);
			Label l53 = new Label();
			mv.visitLabel(l53);
			mv.visitLineNumber(278, l53);
			mv.visitVarInsn(ALOAD, p4);
			Label l54 = new Label();
			mv.visitJumpInsn(IFNULL, l54);
			Label l55 = new Label();
			mv.visitLabel(l55);
			mv.visitLineNumber(279, l55);
			mv.visitVarInsn(ALOAD, p4);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");
			mv.visitInsn(ARETURN);
			mv.visitLabel(l54);
			mv.visitLineNumber(281, l54);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitTypeInsn(NEW, "java/lang/ClassNotFoundException");
			mv.visitInsn(DUP);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassNotFoundException", "<init>", "(Ljava/lang/String;)V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l12);
			mv.visitLineNumber(285, l12);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitLdcInsn(PMLLoadFocuser.LoadFocuserClassName);
			mv.visitMethodInsn(INVOKEVIRTUAL, this.className, "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");
			mv.visitVarInsn(ASTORE, p5);
			Label l56 = new Label();
			mv.visitLabel(l56);
			mv.visitLineNumber(286, l56);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitLdcInsn(PMLLoadFocuser.pmlClassSearchOverrideMethodName);
			mv.visitInsn(ICONST_2);
			mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_0);
			mv.visitLdcInsn(Type.getType("Ljava/lang/ClassLoader;"));
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_1);
			mv.visitLdcInsn(Type.getType("Ljava/lang/String;"));
			mv.visitInsn(AASTORE);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;");
			mv.visitVarInsn(ASTORE, p6);
			Label l57 = new Label();
			mv.visitLabel(l57);
			mv.visitLineNumber(287, l57);
			mv.visitVarInsn(ALOAD, p6);
			mv.visitInsn(ACONST_NULL);
			mv.visitInsn(ICONST_2);
			mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_1);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitInsn(AASTORE);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
			mv.visitTypeInsn(CHECKCAST, "java/lang/Class");
			mv.visitVarInsn(ASTORE, p3);
			Label l58 = new Label();
			mv.visitLabel(l58);
			mv.visitLineNumber(288, l58);
			mv.visitVarInsn(ALOAD, p3);
			mv.visitJumpInsn(IFNULL, l22);
			Label l59 = new Label();
			mv.visitLabel(l59);
			mv.visitLineNumber(289, l59);
			mv.visitVarInsn(ALOAD, p3);
			mv.visitLabel(l13);
			mv.visitInsn(ARETURN);
			mv.visitLabel(l14);
			mv.visitLineNumber(290, l14);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/ClassNotFoundException"});
			mv.visitVarInsn(ASTORE, p5);
			mv.visitJumpInsn(GOTO, l22);
			mv.visitLabel(l15);
			mv.visitLineNumber(291, l15);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/reflect/InvocationTargetException"});
			mv.visitVarInsn(ASTORE, p5);
			Label l60 = new Label();
			mv.visitLabel(l60);
			mv.visitLineNumber(296, l60);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l16);
			mv.visitLineNumber(297, l16);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/RuntimeException"});
			mv.visitVarInsn(ASTORE, p5);
			Label l61 = new Label();
			mv.visitLabel(l61);
			mv.visitLineNumber(299, l61);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l17);
			mv.visitLineNumber(300, l17);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
			mv.visitVarInsn(ASTORE, p5);
			Label l62 = new Label();
			mv.visitLabel(l62);
			mv.visitLineNumber(301, l62);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitVarInsn(ALOAD, p5);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l22);
			mv.visitLineNumber(306, l22);
		}
	};
	static class ClassLoaderConstructionMethodVisitor extends AdviceAdapter implements Opcodes {
		public ClassLoaderConstructionMethodVisitor(MethodVisitor mv, int access, String name, String desc, String className){
			super(ASM4, mv, access, name, desc);
			this.className = className;
		}//sun.reflect.DelegatingClassLoader
		String className;
		@Override 
		public void visitCode(){
			super.visitCode();
			mv.visitTryCatchBlock(l0, l1, l2, "java/lang/ClassNotFoundException");
			
			mv.visitTryCatchBlock(l0, l1, l3, "java/lang/reflect/InvocationTargetException");
			
			mv.visitTryCatchBlock(l0, l1, l4, "java/lang/Throwable");
			v1 = this.newLocal(Type.getType(Method.class));
		}
		Label l0 = new Label();
		Label l1 = new Label();
		Label l2 = new Label();
		Label l3 = new Label();
		Label l4 = new Label();
		
		int v1;
		@Override
		protected void onMethodExit(int opcode){
			if(opcode == ATHROW){
				super.onMethodExit(opcode);
				return;
			}
			Label l62 = new Label();
			mv.visitLabel(l62);
			mv.visitLineNumber(23, l62);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;");
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;");
			mv.visitLdcInsn("sun.reflect.");
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;)Z");
			mv.visitJumpInsn(IFEQ, l0);
			Label l72 = new Label();
			mv.visitLabel(l72);
			mv.visitLineNumber(24, l72);
			mv.visitInsn(RETURN);
			
			mv.visitLabel(l0);
			//mv.visitLineNumber(44, l0);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;");
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "getContextClassLoader", "()Ljava/lang/ClassLoader;");
			mv.visitLdcInsn(PMLLoadFocuser.LoadFocuserClassName);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");
			Label l5 = new Label();
			mv.visitLabel(l5);
			//mv.visitLineNumber(45, l5);
			mv.visitLdcInsn(PMLLoadFocuser.pmlClassLoaderRegistrationMethodName);
			mv.visitInsn(ICONST_3);
			mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_0);
			mv.visitLdcInsn(Type.getType("Ljava/lang/ClassLoader;"));
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_1);
			mv.visitLdcInsn(Type.getType("Ljava/lang/Class;"));
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_2);
			mv.visitLdcInsn(Type.getType("Ljava/lang/String;"));
			mv.visitInsn(AASTORE);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;");
			Label l6 = new Label();
			mv.visitLabel(l6);
			//mv.visitLineNumber(44, l6);
			mv.visitVarInsn(ASTORE, v1);
			Label l7 = new Label();
			mv.visitLabel(l7);
			//mv.visitLineNumber(46, l7);
			mv.visitVarInsn(ALOAD, v1);
			mv.visitInsn(ICONST_1);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "setAccessible", "(Z)V");
			Label l8 = new Label();
			mv.visitLabel(l8);
			//mv.visitLineNumber(47, l8);
			mv.visitVarInsn(ALOAD, v1);
			mv.visitInsn(ACONST_NULL);
			mv.visitInsn(ICONST_3);
			mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_1);
			mv.visitLdcInsn(Type.getType("L"+this.className.replace('.', '/')+";"));
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_2);
			mv.visitLdcInsn(this.methodDesc);
			mv.visitInsn(AASTORE);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
			mv.visitInsn(POP);
			mv.visitLabel(l1);
			//mv.visitLineNumber(48, l1);
			Label l9 = new Label();
			mv.visitJumpInsn(GOTO, l9);
			mv.visitLabel(l2);
			//mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/ClassNotFoundException"});
			mv.visitVarInsn(ASTORE, 1);
			mv.visitJumpInsn(GOTO, l9);
			mv.visitLabel(l3);
			//mv.visitLineNumber(50, l3);
			//mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/reflect/InvocationTargetException"});
			mv.visitVarInsn(ASTORE, 1);
			Label l10 = new Label();
			mv.visitLabel(l10);
			//mv.visitLineNumber(51, l10);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/InvocationTargetException", "getCause", "()Ljava/lang/Throwable;");
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/Throwable;)V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l4);
			//mv.visitLineNumber(52, l4);
			//mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
			mv.visitVarInsn(ASTORE, 1);
			Label l11 = new Label();
			mv.visitLabel(l11);
			//mv.visitLineNumber(53, l11);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "printStackTrace", "()V");
			Label l12 = new Label();
			mv.visitLabel(l12);
			//mv.visitLineNumber(54, l12);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/Throwable;)V");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l9);
			//mv.visitLineNumber(56, l9);
			//mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			//mv.visitInsn(RETURN);
			super.onMethodExit(opcode);
			/*Label l11 = new Label();
			mv.visitLabel(l11);
			mv.visitLocalVariable("this", "Lweatherpony/pml/premain/PMLBootClassLoader;", null, l0, l11, 0);
			mv.visitLocalVariable("e", "Ljava/lang/reflect/InvocationTargetException;", null, l8, l4, 1);
			mv.visitLocalVariable("e", "Ljava/lang/Throwable;", null, l9, l7, 1);
			mv.visitMaxs(6, 2);*/
		}
		
	}
	static class ClassLoaderDefineClassMethodVisitor extends MethodVisitor implements Opcodes {
		public ClassLoaderDefineClassMethodVisitor(MethodVisitor mv, String className){
			super(ASM4, mv);
			this.className = className;
		}
		String className;
		LocalVariablesSorter sorter;
		
		Label l0 = new Label();
		Label l1 = new Label();
		Label l2 = new Label();
		Label l3 = new Label();
		Label l4 = new Label();
		Label l5 = new Label();
		Label l6 = new Label();
		Label l7 = new Label();
		Label l8 = new Label();
		Label l9 = new Label();
		Label l10 = new Label();
		Label l11 = new Label();
		Label l12 = new Label();
		Label l13 = new Label();
		Label l14 = new Label();
		Label l15 = new Label();
		Label l16 = new Label();
		Label l17 = new Label();
		Label l18 = new Label();
		Label l19 = new Label();
		Label l20 = new Label();
		Label l21 = new Label();
		Label l22 = new Label();
		Label l23 = new Label();
		int pmlLoadFocuser;
		int edit;
		int ret;
		int e;
		int e2;
		
		@Override
		public void visitCode(){
			mv.visitCode();
			
			mv.visitTryCatchBlock(l0, l1, l2, "java/lang/ClassNotFoundException");

			mv.visitTryCatchBlock(l0, l1, l3, "java/lang/Throwable");
			
			mv.visitLabel(l4);
			
			if(testingcode){
				mv.visitLabel(l6);
				mv.visitLineNumber(25, l6);
				mv.visitVarInsn(ALOAD, 2);
				mv.visitJumpInsn(IFNONNULL, l7);
				mv.visitLabel(l8);
				mv.visitLineNumber(26, l8);
				mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
				mv.visitInsn(DUP);
				mv.visitLdcInsn("PML: the class' bytecode was null");
				mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/String;)V");
				mv.visitInsn(ATHROW);
				mv.visitLabel(l7);
				mv.visitLineNumber(27, l7);
				mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
				mv.visitVarInsn(ALOAD, 1);
				mv.visitJumpInsn(IFNONNULL, l0);
				mv.visitLabel(l9);
				mv.visitLineNumber(28, l9);
				mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
				mv.visitInsn(DUP);
				mv.visitLdcInsn("PML: the class' name was null");
				mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/String;)V");
				mv.visitInsn(ATHROW);
			}
			mv.visitLabel(l0);
			mv.visitLineNumber(32, l0);
			
			mv.visitVarInsn(ALOAD, 1);
			mv.visitJumpInsn(IFNULL, l10);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitLdcInsn("sun.reflect");
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;)Z");
			mv.visitJumpInsn(IFEQ, l10);
			
			mv.visitLabel(l11);
			mv.visitLineNumber(33, l11);
			mv.visitJumpInsn(GOTO, l12);
			
			this.pmlLoadFocuser = this.sorter.newLocal(Type.getType(Class.class));
			
			mv.visitLabel(l10);
			mv.visitLineNumber(35, l10);
			//mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitLdcInsn(PMLLoadFocuser.LoadFocuserClassName);
			mv.visitMethodInsn(INVOKEVIRTUAL, this.className, "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");
			mv.visitVarInsn(ASTORE, pmlLoadFocuser);
			mv.visitLabel(l13);
			mv.visitLineNumber(36, l13);
			
			this.edit = this.sorter.newLocal(Type.getType(Method.class));
			
			mv.visitVarInsn(ALOAD, pmlLoadFocuser);
			mv.visitLdcInsn(PMLLoadFocuser.pmlClassTransformationMethodName);
			mv.visitIntInsn(BIPUSH, 6);
			mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_0);
			mv.visitLdcInsn(Type.getType("Ljava/lang/ClassLoader;"));
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_1);
			mv.visitLdcInsn(Type.getType("Ljava/lang/String;"));
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_2);
			mv.visitLdcInsn(Type.getType("[B"));
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_3);
			mv.visitFieldInsn(GETSTATIC, "java/lang/Integer", "TYPE", "Ljava/lang/Class;");
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_4);
			mv.visitFieldInsn(GETSTATIC, "java/lang/Integer", "TYPE", "Ljava/lang/Class;");
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_5);
			mv.visitLdcInsn(Type.getType("Ljava/security/ProtectionDomain;"));
			mv.visitInsn(AASTORE);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;");
			mv.visitVarInsn(ASTORE, edit);
			
			mv.visitLabel(l14);
			mv.visitLineNumber(37, l14);
			mv.visitVarInsn(ALOAD, edit);
			mv.visitInsn(ICONST_1);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "setAccessible", "(Z)V");
			
			this.ret = this.sorter.newLocal(Type.getType(Object.class));
			
			mv.visitLabel(l15);
			mv.visitLineNumber(38, l15);
			mv.visitVarInsn(ALOAD, edit);
			mv.visitInsn(ACONST_NULL);
			mv.visitIntInsn(BIPUSH, 6);
			mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_1);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_2);
			mv.visitVarInsn(ALOAD, 2);
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_3);
			mv.visitVarInsn(ILOAD, 3);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;");
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_4);
			mv.visitVarInsn(ILOAD, 4);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;");
			mv.visitInsn(AASTORE);
			mv.visitInsn(DUP);
			mv.visitInsn(ICONST_5);
			mv.visitVarInsn(ALOAD, 5);
			mv.visitInsn(AASTORE);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");
			mv.visitVarInsn(ASTORE, ret);
			
			mv.visitLabel(l16);
			mv.visitLineNumber(39, l16);
			mv.visitVarInsn(ALOAD, ret);
			mv.visitJumpInsn(IFNONNULL, l17);
			mv.visitVarInsn(ALOAD, 2);
			mv.visitJumpInsn(IFNULL, l17);
			
			mv.visitLabel(l18);
			mv.visitLineNumber(40, l18);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitLdcInsn("PML: PML has royally messed up");
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/String;)V");
			mv.visitInsn(ATHROW);
			
			mv.visitLabel(l17);
			mv.visitLineNumber(42, l17);
			mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {"java/lang/Class", "java/lang/reflect/Method", "java/lang/Object"}, 0, null);
			mv.visitVarInsn(ALOAD, ret);
			mv.visitTypeInsn(CHECKCAST, "[B");
			mv.visitVarInsn(ASTORE, 2);
			mv.visitLabel(l19);
			mv.visitLineNumber(43, l19);
			mv.visitInsn(ICONST_0);
			mv.visitVarInsn(ISTORE, 3);
			mv.visitLabel(l20);
			mv.visitLineNumber(44, l20);
			mv.visitVarInsn(ALOAD, 2);
			mv.visitInsn(ARRAYLENGTH);
			mv.visitVarInsn(ISTORE, 4);
			
			mv.visitLabel(l1);
			mv.visitLineNumber(46, l1);
			mv.visitJumpInsn(GOTO, l12);
			
			this.e = this.sorter.newLocal(Type.getType(ClassNotFoundException.class));
			
			mv.visitLabel(l2);
			mv.visitFrame(Opcodes.F_FULL, 6, new Object[] {this.className, "java/lang/String", "[B", Opcodes.INTEGER, Opcodes.INTEGER, "java/security/ProtectionDomain"}, 1, new Object[] {"java/lang/ClassNotFoundException"});
			mv.visitVarInsn(ASTORE, e);
			mv.visitJumpInsn(GOTO, l12);
			
			this.e2 = this.sorter.newLocal(Type.getType(Throwable.class));
			
			mv.visitLabel(l3);
			mv.visitLineNumber(47, l3);
			mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
			mv.visitVarInsn(ASTORE, e2);
			mv.visitLabel(l21);
			mv.visitLineNumber(48, l21);
			mv.visitVarInsn(ALOAD, e2);
			mv.visitTypeInsn(INSTANCEOF, "java/lang/RuntimeException");
			mv.visitJumpInsn(IFEQ, l22);
			mv.visitLabel(l23);
			mv.visitLineNumber(49, l23);
			mv.visitVarInsn(ALOAD, e2);
			mv.visitTypeInsn(CHECKCAST, "java/lang/RuntimeException");
			mv.visitInsn(ATHROW);
			mv.visitLabel(l22);
			mv.visitLineNumber(50, l22);
			mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Throwable"}, 0, null);
			mv.visitTypeInsn(NEW, "java/lang/RuntimeException");
			mv.visitInsn(DUP);
			mv.visitVarInsn(ALOAD, e2);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/Throwable;)V");
			mv.visitInsn(ATHROW);
			
			
			mv.visitLabel(l12);
			mv.visitLineNumber(53, l12);
			mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
		}
		@Override
		public void visitLocalVariable(String name, String desc, String signature, Label start, Label end, int index){
			super.visitLocalVariable(name, desc, signature, start, end, index);
		}
		@Override
		public void visitMaxs(int maxStack, int maxLocals){
			mv.visitLocalVariable("pmlLoadFocuser", "Ljava/lang/Class;", null, l13, l1, pmlLoadFocuser);
			mv.visitLocalVariable("edit", "Ljava/lang/reflect/Method;", null, l14, l1, edit);
			mv.visitLocalVariable("ret", "Ljava/lang/Object;", null, l16, l1, ret);
			mv.visitLocalVariable("e2", "Ljava/lang/Throwable;", null, l21, l12, e2);
			//mv.visitLocalVariable("e", "Ljava/lang/Throwable;", null, l20, l10, e);
			super.visitMaxs(maxStack, maxLocals);
		}
	}
	
}
